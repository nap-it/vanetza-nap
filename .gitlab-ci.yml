
variables:
  DOCKERFILE_PATH: .
  DOCKERFILE_NAME: Dockerfile
  DOCKER_HOST: "unix:///var/run/docker.sock"

stages:
  - build
  - release
  - manifest
  - clean

before_script:
  - DOCKER_TAG=$([[ "$CI_COMMIT_BRANCH" == "" || "$CI_COMMIT_BRANCH" == "$CI_DEFAULT_BRANCH" ]] && echo "latest" || echo "$CI_COMMIT_BRANCH")

build_amd64:
  stage: build
  image: docker:latest
  tags:
    - amd64
  script:
    -  |
      if [[ "$CI_COMMIT_TAG" != "" ]] || [[ "$CI_COMMIT_BRANCH" != "$CI_DEFAULT_BRANCH" ]]; then
        TAG_VERSION=$([[ "$CI_COMMIT_BRANCH" == "" || "$CI_COMMIT_BRANCH" == "$CI_DEFAULT_BRANCH" ]] && echo "$CI_COMMIT_TAG" || echo "$CI_COMMIT_BRANCH")
        echo "Modifying Dockerfile to include version $TAG_VERSION"
        sed -i '/^ENTRYPOINT/i ENV VERSION='"$TAG_VERSION" $DOCKERFILE_PATH/$DOCKERFILE_NAME
        sed -i '/^ENTRYPOINT/i ENV COMMIT='"$CI_COMMIT_SHORT_SHA" $DOCKERFILE_PATH/$DOCKERFILE_NAME
      fi
    - docker build -t code.nap.av.it.pt:5050/$CI_PROJECT_PATH:$DOCKER_TAG-amd64 -f $DOCKERFILE_NAME $DOCKERFILE_PATH
    - |
      if [[ "$CI_COMMIT_TAG" != "" ]] || [[ "$CI_COMMIT_BRANCH" != "$CI_DEFAULT_BRANCH" ]]; then
        echo "$CI_TOKEN" | docker login -u "$CI_USER" --password-stdin code.nap.av.it.pt:5050;
        docker push code.nap.av.it.pt:5050/$CI_PROJECT_PATH:$DOCKER_TAG-amd64;
      fi
  rules:
    - if: '$CI_COMMIT_TAG != "latest"'

build_arm64:
  stage: build
  image: docker:latest
  tags:
    - arm64
  script:
    -  |
      if [[ "$CI_COMMIT_TAG" != "" ]] || [[ "$CI_COMMIT_BRANCH" != "$CI_DEFAULT_BRANCH" ]]; then
        TAG_VERSION=$([[ "$CI_COMMIT_BRANCH" == "" || "$CI_COMMIT_BRANCH" == "$CI_DEFAULT_BRANCH" ]] && echo "$CI_COMMIT_TAG" || echo "$CI_COMMIT_BRANCH")
        echo "Modifying Dockerfile to include version $TAG_VERSION"
        sed -i '/^ENTRYPOINT/i ENV VERSION='"$TAG_VERSION" $DOCKERFILE_PATH/$DOCKERFILE_NAME
        sed -i '/^ENTRYPOINT/i ENV COMMIT='"$CI_COMMIT_SHORT_SHA" $DOCKERFILE_PATH/$DOCKERFILE_NAME
      fi
    - docker build -t code.nap.av.it.pt:5050/$CI_PROJECT_PATH:$DOCKER_TAG-arm64 -f $DOCKERFILE_NAME $DOCKERFILE_PATH
    - |
      if [[ "$CI_COMMIT_TAG" != "" ]] || [[ "$CI_COMMIT_BRANCH" != "$CI_DEFAULT_BRANCH" ]]; then
        echo "$CI_TOKEN" | docker login -u "$CI_USER" --password-stdin code.nap.av.it.pt:5050;
        docker push code.nap.av.it.pt:5050/$CI_PROJECT_PATH:$DOCKER_TAG-arm64;
      fi
  rules:
    - if: '$CI_COMMIT_TAG != "latest"'

manage_release:
  stage: release
  tags:
    - amd64
  image: curlimages/curl:latest
  before_script:
    - curl --location --output ~/release-cli "https://gitlab.com/api/v4/projects/gitlab-org%2Frelease-cli/packages/generic/release-cli/latest/release-cli-linux-amd64"
    - chmod +x ~/release-cli
  script:
    - export PREVIOUS_PATCH_VERSION=$(( ${CI_COMMIT_REF_NAME##*.} - 1 ))
    - export PREVIOUS_TAG="${CI_COMMIT_REF_NAME%.*}.$PREVIOUS_PATCH_VERSION"

    # If only Patch changes, delete the previous release
    - |
      if [[ $PREVIOUS_PATCH_VERSION -ge 0 ]]; then
        echo "Deleting previous Patch release $PREVIOUS_TAG";
        curl --request DELETE --header "PRIVATE-TOKEN: $CI_TOKEN" "$CI_API_V4_URL/projects/$CI_PROJECT_ID/releases/$PREVIOUS_TAG";
      fi

    # Create a new release for this tag
    - |
      echo "Creating new release for tag $CI_COMMIT_TAG"
      ~/release-cli create --name "Release $CI_COMMIT_TAG" --description "Release files and assets for the version $CI_COMMIT_TAG" \
      --tag-name "$CI_COMMIT_TAG" --ref "$CI_COMMIT_TAG"

    # Update Latest Release
    - |
      echo "Update Latest Release"
      echo "Deleting Latest Release";
      curl --request DELETE --header "PRIVATE-TOKEN: $CI_TOKEN" "$CI_API_V4_URL/projects/$CI_PROJECT_ID/releases/latest"
      curl --request DELETE --header "PRIVATE-TOKEN: $CI_TOKEN" "$CI_API_V4_URL/projects/$CI_PROJECT_ID/repository/tags/latest"
      echo "Creating Latest Release for version $CI_COMMIT_TAG"
      ~/release-cli create --name "Release Latest" --description "Release files and assets for the version $CI_COMMIT_TAG" \
      --tag-name "latest" --ref "$CI_COMMIT_TAG" \
      --assets-link "{\"name\":\"${CI_PROJECT_NAME}\",\"url\":\"https://code.nap.av.it.pt:5050/${CI_PROJECT_PATH}:latest\"}"
  dependencies:
    - build_amd64
    - build_arm64
  rules:
    - if: '$CI_COMMIT_TAG && $CI_COMMIT_TAG != "latest"'


create_manifest:
  stage: manifest
  image: docker:latest
  tags:
    - amd64
  script:
    - echo "$CI_TOKEN" | docker login -u "$CI_USER" --password-stdin code.nap.av.it.pt:5050
    - docker manifest create code.nap.av.it.pt:5050/$CI_PROJECT_PATH:$DOCKER_TAG code.nap.av.it.pt:5050/$CI_PROJECT_PATH:$DOCKER_TAG-amd64 code.nap.av.it.pt:5050/$CI_PROJECT_PATH:$DOCKER_TAG-arm64
    - docker manifest annotate code.nap.av.it.pt:5050/$CI_PROJECT_PATH:$DOCKER_TAG code.nap.av.it.pt:5050/$CI_PROJECT_PATH:$DOCKER_TAG-amd64 --arch amd64
    - docker manifest annotate code.nap.av.it.pt:5050/$CI_PROJECT_PATH:$DOCKER_TAG code.nap.av.it.pt:5050/$CI_PROJECT_PATH:$DOCKER_TAG-arm64 --arch arm64
    - docker manifest push code.nap.av.it.pt:5050/$CI_PROJECT_PATH:$DOCKER_TAG
  dependencies:
    - build_amd64
    - build_arm64
  rules:
    - if: '$CI_COMMIT_TAG && $CI_COMMIT_TAG != "latest" || ($CI_COMMIT_BRANCH && $CI_COMMIT_BRANCH != $CI_DEFAULT_BRANCH)'

create_tagged_manifest:
  stage: manifest
  image: docker:latest
  tags:
    - amd64
  script:
    - echo "$CI_TOKEN" | docker login -u "$CI_USER" --password-stdin code.nap.av.it.pt:5050
    - docker manifest create code.nap.av.it.pt:5050/$CI_PROJECT_PATH:$CI_COMMIT_TAG code.nap.av.it.pt:5050/$CI_PROJECT_PATH:$DOCKER_TAG-amd64 code.nap.av.it.pt:5050/$CI_PROJECT_PATH:$DOCKER_TAG-arm64
    - docker manifest annotate code.nap.av.it.pt:5050/$CI_PROJECT_PATH:$CI_COMMIT_TAG code.nap.av.it.pt:5050/$CI_PROJECT_PATH:$DOCKER_TAG-amd64 --arch amd64
    - docker manifest annotate code.nap.av.it.pt:5050/$CI_PROJECT_PATH:$CI_COMMIT_TAG code.nap.av.it.pt:5050/$CI_PROJECT_PATH:$DOCKER_TAG-arm64 --arch arm64
    - docker manifest push code.nap.av.it.pt:5050/$CI_PROJECT_PATH:$CI_COMMIT_TAG
  dependencies:
    - build_amd64
    - build_arm64
  rules:
    - if: '$CI_COMMIT_TAG && $CI_COMMIT_TAG != "latest"'

cleanup_arch_images:
  stage: clean
  image: alpine:latest
  tags:
    - amd64
  script:
    - apk update
    - apk add curl
    - curl --fail-with-body --location "https://github.com/regclient/regclient/releases/download/v0.6.1/regctl-linux-amd64" > /usr/bin/regctl
    - chmod 755 /usr/bin/regctl
    - regctl registry login code.nap.av.it.pt:5050 -u ${CI_USER} -p ${CI_TOKEN}
    - regctl tag rm code.nap.av.it.pt:5050/$CI_PROJECT_PATH:$DOCKER_TAG-amd64
    - regctl tag rm code.nap.av.it.pt:5050/$CI_PROJECT_PATH:$DOCKER_TAG-arm64
    - |
      if [[ "$CI_COMMIT_TAG" != "" ]]; then
        export PREVIOUS_PATCH_VERSION=$(( ${CI_COMMIT_REF_NAME##*.} - 1 ));
        export PREVIOUS_TAG="${CI_COMMIT_REF_NAME%.*}.$PREVIOUS_PATCH_VERSION";
        regctl tag rm code.nap.av.it.pt:5050/$CI_PROJECT_PATH:$PREVIOUS_TAG || true;
      fi
  dependencies:
    - create_manifest
  rules:
    - if: '$CI_COMMIT_TAG && $CI_COMMIT_TAG != "latest" || ($CI_COMMIT_BRANCH && $CI_COMMIT_BRANCH != $CI_DEFAULT_BRANCH)'

