MCM-PDU-Descriptions {
itu-t (0) identified-organization (4) etsi (0) itsDomain (5) wg1 (1) ts(103561) mcm (1) major-version-1 (1) minor-version-1 (1)
} 

DEFINITIONS AUTOMATIC TAGS ::=

BEGIN

IMPORTS
    ItsPduHeader, Position, Speed, Heading, Acceleration, VehicleRole, VehicleLength, VehicleWidth, ManeuverType, ManeuverStatus, TrafficRule, TimeOfOccurrence, EventPriority, Latitude, Longitude,
    EmergencyStatus, AltitudeConfidence, Altitude, LaneCount FROM ITS-Container {
        itu-t (0) identified-organization (4) etsi (0) itsDomain (5) wg1 (1) ts (102894) cdd (2) version (2) 
    }
    WGS84AngleValue FROM CPM-PDU-Descriptions {
        itu-t (0) identified-organization (4) etsi (0) itsDomain (5) wg1 (1) tr (103562) cpm (1) version (1)
    }
    GenerationDeltaTime FROM CAM-PDU-Descriptions {
        itu-t (0) identified-organization (4) etsi (0) itsDomain (5) wg1 (1) en (302637) cam (2) version (2)
    };



-- Manoeuvre Coordination Block:

/**
 * This type represents the Manoeuvre Coordination Block at a given facility.  
 *
 * It shall include the following components: 
 *
 * @field header: the header of the MCM PDU,
 * 
 * @field mcm: the payload of the MCM PDU,
*/

MCM ::= SEQUENCE {
  header  ItsPduHeader (WITH COMPONENTS { ..., protocolVersion (1), messageId (mcm) }),
  payload WrappedMcmInformationBlocks
}

WrappedMcmInformationBlocks ::= SEQUENCE {
    basicContainer McmBasicContainer,
    mcmContainer McmContainer
}

/*
MCM-CONTAINER-ID-AND-TYPE ::= CLASS {
  &id McmContainerid UNIQUE,
  &Type
} WITH SYNTAX {&Type IDENTIFIED BY &id}
*/

/*McmBasicContainer {MCM-CONTAINER-ID-AND-TYPE:Set}::= SEQUENCE {*/
McmBasicContainer ::= SEQUENCE {
	generationDeltaTime TimestampIts, -- Generation TimestampIts represent an integer value in milliseconds since 2004-01-01T00-00-00-00Z as defined in ETSI TS 102 894-2
	stationType StationType,    -- Type of originating IT-S which is dessiminating the message
	referencePositionWithConfidence ReferencePositionWithConfidence -- spatial coordinates of the ITS-S position at the time of MCM dissemination
}

ReferencePositionWithConfidence ::= SEQUENCE {
    latitude                     Latitude,
    longitude                    Longitude,
    positionConfidenceEllipse    PositionConfidenceEllipse,
    altitude                     Altitude
}

PositionConfidenceEllipse ::= SEQUENCE {
    semiMajorAxisLength         SemiAxisLength,
    semiMinorAxisLength         SemiAxisLength,
    semiMajorAxisOrientation    WGS84AngleValue
}
    
McmContainer::= CHOICE {
	vehicleManoeuvreContainer VehicleManoeuvreContainer,
	manoeuvreAdviceContainer ManoeuvreAdviceContainer
}

VehicleManoeuvreContainer::= SEQUENCE {
	manoeuvreId INTEGER (0..65535),
	manoeuvreCoordinationConcept ManoeuvreCoordinationConcept,
	manoeuvreCoordinationRational ManoeuvreCoordinationRational,
	manoeuvreExecutionCoordinationStep ManoeuvreExecutionCoordinationStep,
	vehicleAutomationState VehicleAutomationState OPTIONAL,
	vehicleReferenceTrajectory Trajectory, --planned to be driven by the originating vehicle 
	manoeuvreAdviceContainer ManoeuvreAdviceContainer OPTIONAL --sending advice to target vehicles
}

TrajectoryId::= INTEGER (0..65535)

ManoeuvreCoordinationConcept::=ENUMERATED {
	agreementSeekingOffer (1),
	agreementSeekingRequest (2),
	agreementSeekingAdvice (3),
	prescription (4)
}

ManoeuvreCoordinationRational::= CHOICE {
	manoeuvreGoal ManoeuvreGoal,
	manoeuvreCooperationCost ManoeuvreCooperationCost
}

ManoeuvreGoal ::= ENUMERATED {
	vehicleInterception (0),
	roadSafety (1),
	humanHelth (2),
	emergencyIntervention (3),
	roadOperatorIntervention (4),
	localTrafficManagement (5),
	globalTrafficManagement (6)
}

ManoeuvreCooperationCost ::= SEQUENCE {
	vehicleAutomationLevel INTEGER (0..7),
	vehiclePerceptionCapabilities INTEGER (0..7),
	vehiclePropulsionCapabilities INTEGER (0..7),
	vehicleOccupantNumber INTEGER (0..64),
	vehicleTransportedGoodsRequirements INTEGER (0..7)
}

ManoeuvreExecutionCoordinationStep ::= ENUMERATED {
	initiationphase (0),
	cooperationDeclineResponsePhase (1),
	cooperationAcceptanceResponsePhase (2),
	executionPhase (3), 
	terminationPhase (4),
	cancellationPhase (5),
	chainingPhase (6)
}

VehicleAutomationState::= SEQUENCE {
	humanDrivingLongitudinalAutomated BOOLEAN,
	humanDrivenLateralAutomated BOOLEAN,
	automatedDriving BOOLEAN -- true if the vehicle is in automated driving mode
}

ManoeuvreAdviceContainer ::= SEQUENCE {
  numberOfExecutant INTEGER (1..16),
  executantData SEQUENCE (SIZE (1..16)) OF ExecutantData
}

ExecutantData ::= SEQUENCE {
  id INTEGER (0..65535),
  state AdvisoryChangeExecutantState,
  advice ManoeuvreAdvice
}

AdvisoryChangeExecutantState ::= ENUMERATED {
  transitToHumanDrivingMode (1),
  transitToAutomatedDrivingMode (2),
  followMe (3),
  joinGroup (4),
  leaveGroup (5)
}

ManoeuvreAdvice ::= SEQUENCE {
  manoeuvreID INTEGER (0..65535),
  executantID INTEGER (0..65535),
  executantPosition ReferencePositionWithConfidence,
  executantHeading Heading,
  trajectoryType TrajectoryType,
  trajectory Trajectory
}

TrajectoryType ::= ENUMERATED {
  referenceFollowMe (0),
  referenceGroup (1),
  advised (2),
  requested (3)
}

ManouevreResponse::= CHOICE {
	offerAcceptation BOOLEAN,
	offerDecline BOOLEAN,
	requestAcceptation BOOLEAN,
	requestDecline ENUMERATED {
    	agreementSeekingUnknown (0),
    	agreementSeekingUnwanted (2),
    	allUnableToConform (1),
    	allUnableToUnderstand (3),
    	allErroneousBehaviourDetected (4),
    	allMissbehaviourDetected (5)
  	}
}

Trajectory::= SEQUENCE {
	intermediatePoints SEQUENCE SIZE (1..10) OF IntermediatePoint,
	longitudinalPositions SEQUENCE SIZE (1..11) OF Polynom,
	lateralPositions SEQUENCE SIZE (1..11) OF Polynom,
	elevationPositions SEQUENCE SIZE (1..11) OF Polynom OPTIONAL,
	headings SEQUENCE SIZE (1..11) OF Polynom OPTIONAL,
	speed INTEGER (0..511) -- in meters per second
}

IntermediatePoint::= CHOICE {
	reference IntermediatePointReference,
	lane IntermediatePointLane,
	intersection IntermediatePointIntersection,
	offroad	IntermediatePointOffroad
}

Polynom ::= SEQUENCE {
	coefficients SEQUENCE SIZE (1..6) OF PolynomCoefficient,
	start PolynomStartX,
	end PolynomEndX,
	xOffset PolynomXOffst
}

IntermediatePointReference::= SEQUENCE {
	referenceStartingPosition ReferencePositionWithConfidence,
	referenceHeading Heading,
	lane Lane,
	timeOfPos TimeOfPos
}

IntermediatePointLane::= SEQUENCE {
	lane Lane,
	reason Reason,
	timeOfPos TimeOfPos
}

IntermediatePointIntersection::= SEQUENCE {
	exitLane SEQUENCE {
		lanePosition LanePosition,
		laneCount LaneCount
},
	exitHeading Heading,
	timeOfPosEntry TimeOfPos, -- time on the trajectory when the intersection will be entered
	timeOfPosExit TimeOfPos -- time on the trajectory when the intersection will be leaved
}

IntermediatePointOffroad::= SEQUENCE {
	referencePosition ReferencePositionWithConfidence,
	referenceHeading Heading,
	timeOfPos TimeOfPos
}

Lane::= SEQUENCE {
	lanePosition LanePosition,
	laneCount LaneCount --total number of lanes at the position
}

PolynomCoefficient ::= REAL
PolynomStartX ::= INTEGER (0..2097151) -- Unit: 0.001 meter or seconds
PolynomEndX::= INTEGER (0..2097151) -- Unit: 0.001 meter or seconds
PolynomXOffst::= INTEGER (-8000000..8000000) -- Unit: 0.001 meter or seconds

-- Basic types
LaneCount::= INTEGER (1..16) -- Number of Lanes
TimeOfPos::= INTEGER (0..65535) -- Unit: 0.01 seconds

Reason::= ENUMERATED {
	none (0),
	laneOpening (1),
	laneClosing (2),
	laneChange (3)
}

END