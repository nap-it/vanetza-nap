// Copyright 2016 Proyectos y Sistemas de Mantenimiento SL (eProsima).
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/*!
 * @file MQTTMessage.h
 * This header file contains the declaration of the described types in the IDL file.
 *
 * This file was generated by the tool gen.
 */

#ifndef _FAST_DDS_GENERATED_MQTTMESSAGE_H_
#define _FAST_DDS_GENERATED_MQTTMESSAGE_H_


#include <fastrtps/utils/fixed_size_string.hpp>

#include <stdint.h>
#include <array>
#include <string>
#include <vector>
#include <map>
#include <bitset>

#if defined(_WIN32)
#if defined(EPROSIMA_USER_DLL_EXPORT)
#define eProsima_user_DllExport __declspec( dllexport )
#else
#define eProsima_user_DllExport
#endif  // EPROSIMA_USER_DLL_EXPORT
#else
#define eProsima_user_DllExport
#endif  // _WIN32

#if defined(_WIN32)
#if defined(EPROSIMA_USER_DLL_EXPORT)
#if defined(MQTTMessage_SOURCE)
#define MQTTMessage_DllAPI __declspec( dllexport )
#else
#define MQTTMessage_DllAPI __declspec( dllimport )
#endif // MQTTMessage_SOURCE
#else
#define MQTTMessage_DllAPI
#endif  // EPROSIMA_USER_DLL_EXPORT
#else
#define MQTTMessage_DllAPI
#endif // _WIN32

namespace eprosima {
namespace fastcdr {
class Cdr;
} // namespace fastcdr
} // namespace eprosima

/*!
* @brief This class represents the structure MQTTMessage defined by the user in the IDL file.
* @ingroup MQTTMESSAGE
*/
class MQTTMessage
{
public:

/*!
        * @brief Default constructor.
        */
eProsima_user_DllExport MQTTMessage();

/*!
        * @brief Default destructor.
        */
eProsima_user_DllExport ~MQTTMessage();

/*!
        * @brief Copy constructor.
        * @param x Reference to the object MQTTMessage that will be copied.
        */
eProsima_user_DllExport MQTTMessage(
        const MQTTMessage& x);

/*!
        * @brief Move constructor.
        * @param x Reference to the object MQTTMessage that will be copied.
        */
eProsima_user_DllExport MQTTMessage(
        MQTTMessage&& x) noexcept;

/*!
        * @brief Copy assignment.
        * @param x Reference to the object MQTTMessage that will be copied.
        */
eProsima_user_DllExport MQTTMessage& operator =(
        const MQTTMessage& x);

/*!
        * @brief Move assignment.
        * @param x Reference to the object MQTTMessage that will be copied.
        */
eProsima_user_DllExport MQTTMessage& operator =(
        MQTTMessage&& x) noexcept;

/*!
        * @brief Comparison operator.
        * @param x MQTTMessage object to compare.
        */
eProsima_user_DllExport bool operator ==(
        const MQTTMessage& x) const;

/*!
        * @brief Comparison operator.
        * @param x MQTTMessage object to compare.
        */
eProsima_user_DllExport bool operator !=(
        const MQTTMessage& x) const;

/*!
        * @brief This function sets a value in member uuid
        * @param _uuid New value for member uuid
        */
eProsima_user_DllExport void uuid(
        uint32_t _uuid);

/*!
        * @brief This function returns the value of member uuid
        * @return Value of member uuid
        */
eProsima_user_DllExport uint32_t uuid() const;

/*!
        * @brief This function returns a reference to member uuid
        * @return Reference to member uuid
        */
eProsima_user_DllExport uint32_t& uuid();

/*!
        * @brief This function sets a value in member datetime
        * @param _datetime New value for member datetime
        */
eProsima_user_DllExport void datetime(
        uint32_t _datetime);

/*!
        * @brief This function returns the value of member datetime
        * @return Value of member datetime
        */
eProsima_user_DllExport uint32_t datetime() const;

/*!
        * @brief This function returns a reference to member datetime
        * @return Reference to member datetime
        */
eProsima_user_DllExport uint32_t& datetime();

/*!
        * @brief This function copies the value in member topic
        * @param _topic New value to be copied in member topic
        */
eProsima_user_DllExport void topic(
        const std::string& _topic);

/*!
        * @brief This function moves the value in member topic
        * @param _topic New value to be moved in member topic
        */
eProsima_user_DllExport void topic(
        std::string&& _topic);

/*!
        * @brief This function returns a constant reference to member topic
        * @return Constant reference to member topic
        */
eProsima_user_DllExport const std::string& topic() const;

/*!
        * @brief This function returns a reference to member topic
        * @return Reference to member topic
        */
eProsima_user_DllExport std::string& topic();
/*!
        * @brief This function copies the value in member message
        * @param _message New value to be copied in member message
        */
eProsima_user_DllExport void message(
        const std::string& _message);

/*!
        * @brief This function moves the value in member message
        * @param _message New value to be moved in member message
        */
eProsima_user_DllExport void message(
        std::string&& _message);

/*!
        * @brief This function returns a constant reference to member message
        * @return Constant reference to member message
        */
eProsima_user_DllExport const std::string& message() const;

/*!
        * @brief This function returns a reference to member message
        * @return Reference to member message
        */
eProsima_user_DllExport std::string& message();

/*!
* @brief This function returns the maximum serialized size of an object
* depending on the buffer alignment.
* @param current_alignment Buffer alignment.
* @return Maximum serialized size.
*/
eProsima_user_DllExport static size_t getMaxCdrSerializedSize(
        size_t current_alignment = 0);

/*!
        * @brief This function returns the serialized size of a data depending on the buffer alignment.
        * @param data Data which is calculated its serialized size.
        * @param current_alignment Buffer alignment.
        * @return Serialized size.
        */
eProsima_user_DllExport static size_t getCdrSerializedSize(
        const MQTTMessage& data,
        size_t current_alignment = 0);


/*!
        * @brief This function serializes an object using CDR serialization.
        * @param cdr CDR serialization object.
        */
eProsima_user_DllExport void serialize(
        eprosima::fastcdr::Cdr& cdr) const;

/*!
        * @brief This function deserializes an object using CDR serialization.
        * @param cdr CDR serialization object.
        */
eProsima_user_DllExport void deserialize(
        eprosima::fastcdr::Cdr& cdr);



/*!
        * @brief This function returns the maximum serialized size of the Key of an object
        * depending on the buffer alignment.
        * @param current_alignment Buffer alignment.
        * @return Maximum serialized size.
        */
eProsima_user_DllExport static size_t getKeyMaxCdrSerializedSize(
        size_t current_alignment = 0);

/*!
        * @brief This function tells you if the Key has been defined for this type
        */
eProsima_user_DllExport static bool isKeyDefined();

/*!
        * @brief This function serializes the key members of an object using CDR serialization.
        * @param cdr CDR serialization object.
        */
eProsima_user_DllExport void serializeKey(
        eprosima::fastcdr::Cdr& cdr) const;

private:

uint32_t m_uuid;
uint32_t m_datetime;
std::string m_topic;
std::string m_message;

};

#endif // _FAST_DDS_GENERATED_MQTTMESSAGE_H_