// Copyright 2016 Proyectos y Sistemas de Mantenimiento SL (eProsima).
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/*!
 * @file EncodedITSMessage.cpp
 * This source file contains the implementation of the described types in the IDL file.
 *
 * This file was generated by the tool fastddsgen.
 */

#ifdef _WIN32
// Remove linker warning LNK4221 on Visual Studio
namespace {
char dummy;
}  // namespace
#endif  // _WIN32

#include "EncodedITSMessage.h"

#include <fastcdr/Cdr.h>


#include <fastcdr/exceptions/BadParamException.h>
using namespace eprosima::fastcdr::exception;

#include <utility>




EncodedITSMessage::EncodedITSMessage()
{
}

EncodedITSMessage::~EncodedITSMessage()
{
}

EncodedITSMessage::EncodedITSMessage(
        const EncodedITSMessage& x)
{
    m_topic = x.m_topic;
    m_message = x.m_message;
    m_rssi = x.m_rssi;
    m_newInfo = x.m_newInfo;
    m_packetSize = x.m_packetSize;
    m_stationID = x.m_stationID;
    m_receiverID = x.m_receiverID;
    m_receiverType = x.m_receiverType;
    m_timestamp = x.m_timestamp;
    m_test = x.m_test;
}

EncodedITSMessage::EncodedITSMessage(
        EncodedITSMessage&& x) noexcept
{
    m_topic = std::move(x.m_topic);
    m_message = std::move(x.m_message);
    m_rssi = x.m_rssi;
    m_newInfo = x.m_newInfo;
    m_packetSize = x.m_packetSize;
    m_stationID = x.m_stationID;
    m_receiverID = x.m_receiverID;
    m_receiverType = x.m_receiverType;
    m_timestamp = x.m_timestamp;
    m_test = std::move(x.m_test);
}

EncodedITSMessage& EncodedITSMessage::operator =(
        const EncodedITSMessage& x)
{

    m_topic = x.m_topic;
    m_message = x.m_message;
    m_rssi = x.m_rssi;
    m_newInfo = x.m_newInfo;
    m_packetSize = x.m_packetSize;
    m_stationID = x.m_stationID;
    m_receiverID = x.m_receiverID;
    m_receiverType = x.m_receiverType;
    m_timestamp = x.m_timestamp;
    m_test = x.m_test;
    return *this;
}

EncodedITSMessage& EncodedITSMessage::operator =(
        EncodedITSMessage&& x) noexcept
{

    m_topic = std::move(x.m_topic);
    m_message = std::move(x.m_message);
    m_rssi = x.m_rssi;
    m_newInfo = x.m_newInfo;
    m_packetSize = x.m_packetSize;
    m_stationID = x.m_stationID;
    m_receiverID = x.m_receiverID;
    m_receiverType = x.m_receiverType;
    m_timestamp = x.m_timestamp;
    m_test = std::move(x.m_test);
    return *this;
}

bool EncodedITSMessage::operator ==(
        const EncodedITSMessage& x) const
{
    return (m_topic == x.m_topic &&
           m_message == x.m_message &&
           m_rssi == x.m_rssi &&
           m_newInfo == x.m_newInfo &&
           m_packetSize == x.m_packetSize &&
           m_stationID == x.m_stationID &&
           m_receiverID == x.m_receiverID &&
           m_receiverType == x.m_receiverType &&
           m_timestamp == x.m_timestamp &&
           m_test == x.m_test);
}

bool EncodedITSMessage::operator !=(
        const EncodedITSMessage& x) const
{
    return !(*this == x);
}

/*!
 * @brief This function copies the value in member topic
 * @param _topic New value to be copied in member topic
 */
void EncodedITSMessage::topic(
        const std::string& _topic)
{
    m_topic = _topic;
}

/*!
 * @brief This function moves the value in member topic
 * @param _topic New value to be moved in member topic
 */
void EncodedITSMessage::topic(
        std::string&& _topic)
{
    m_topic = std::move(_topic);
}

/*!
 * @brief This function returns a constant reference to member topic
 * @return Constant reference to member topic
 */
const std::string& EncodedITSMessage::topic() const
{
    return m_topic;
}

/*!
 * @brief This function returns a reference to member topic
 * @return Reference to member topic
 */
std::string& EncodedITSMessage::topic()
{
    return m_topic;
}


/*!
 * @brief This function copies the value in member message
 * @param _message New value to be copied in member message
 */
void EncodedITSMessage::message(
        const std::vector<uint8_t>& _message)
{
    m_message = _message;
}

/*!
 * @brief This function moves the value in member message
 * @param _message New value to be moved in member message
 */
void EncodedITSMessage::message(
        std::vector<uint8_t>&& _message)
{
    m_message = std::move(_message);
}

/*!
 * @brief This function returns a constant reference to member message
 * @return Constant reference to member message
 */
const std::vector<uint8_t>& EncodedITSMessage::message() const
{
    return m_message;
}

/*!
 * @brief This function returns a reference to member message
 * @return Reference to member message
 */
std::vector<uint8_t>& EncodedITSMessage::message()
{
    return m_message;
}


/*!
 * @brief This function copies the value in member rssi
 * @param _rssi New value to be copied in member rssi
 */
void EncodedITSMessage::rssi(
        const eprosima::fastcdr::optional<int16_t>& _rssi)
{
    m_rssi = _rssi;
}

/*!
 * @brief This function moves the value in member rssi
 * @param _rssi New value to be moved in member rssi
 */
void EncodedITSMessage::rssi(
        eprosima::fastcdr::optional<int16_t>&& _rssi)
{
    m_rssi = std::move(_rssi);
}

/*!
 * @brief This function returns a constant reference to member rssi
 * @return Constant reference to member rssi
 */
const eprosima::fastcdr::optional<int16_t>& EncodedITSMessage::rssi() const
{
    return m_rssi;
}

/*!
 * @brief This function returns a reference to member rssi
 * @return Reference to member rssi
 */
eprosima::fastcdr::optional<int16_t>& EncodedITSMessage::rssi()
{
    return m_rssi;
}


/*!
 * @brief This function copies the value in member newInfo
 * @param _newInfo New value to be copied in member newInfo
 */
void EncodedITSMessage::newInfo(
        const eprosima::fastcdr::optional<bool>& _newInfo)
{
    m_newInfo = _newInfo;
}

/*!
 * @brief This function moves the value in member newInfo
 * @param _newInfo New value to be moved in member newInfo
 */
void EncodedITSMessage::newInfo(
        eprosima::fastcdr::optional<bool>&& _newInfo)
{
    m_newInfo = std::move(_newInfo);
}

/*!
 * @brief This function returns a constant reference to member newInfo
 * @return Constant reference to member newInfo
 */
const eprosima::fastcdr::optional<bool>& EncodedITSMessage::newInfo() const
{
    return m_newInfo;
}

/*!
 * @brief This function returns a reference to member newInfo
 * @return Reference to member newInfo
 */
eprosima::fastcdr::optional<bool>& EncodedITSMessage::newInfo()
{
    return m_newInfo;
}


/*!
 * @brief This function copies the value in member packetSize
 * @param _packetSize New value to be copied in member packetSize
 */
void EncodedITSMessage::packetSize(
        const eprosima::fastcdr::optional<int16_t>& _packetSize)
{
    m_packetSize = _packetSize;
}

/*!
 * @brief This function moves the value in member packetSize
 * @param _packetSize New value to be moved in member packetSize
 */
void EncodedITSMessage::packetSize(
        eprosima::fastcdr::optional<int16_t>&& _packetSize)
{
    m_packetSize = std::move(_packetSize);
}

/*!
 * @brief This function returns a constant reference to member packetSize
 * @return Constant reference to member packetSize
 */
const eprosima::fastcdr::optional<int16_t>& EncodedITSMessage::packetSize() const
{
    return m_packetSize;
}

/*!
 * @brief This function returns a reference to member packetSize
 * @return Reference to member packetSize
 */
eprosima::fastcdr::optional<int16_t>& EncodedITSMessage::packetSize()
{
    return m_packetSize;
}


/*!
 * @brief This function copies the value in member stationID
 * @param _stationID New value to be copied in member stationID
 */
void EncodedITSMessage::stationID(
        const eprosima::fastcdr::optional<int32_t>& _stationID)
{
    m_stationID = _stationID;
}

/*!
 * @brief This function moves the value in member stationID
 * @param _stationID New value to be moved in member stationID
 */
void EncodedITSMessage::stationID(
        eprosima::fastcdr::optional<int32_t>&& _stationID)
{
    m_stationID = std::move(_stationID);
}

/*!
 * @brief This function returns a constant reference to member stationID
 * @return Constant reference to member stationID
 */
const eprosima::fastcdr::optional<int32_t>& EncodedITSMessage::stationID() const
{
    return m_stationID;
}

/*!
 * @brief This function returns a reference to member stationID
 * @return Reference to member stationID
 */
eprosima::fastcdr::optional<int32_t>& EncodedITSMessage::stationID()
{
    return m_stationID;
}


/*!
 * @brief This function copies the value in member receiverID
 * @param _receiverID New value to be copied in member receiverID
 */
void EncodedITSMessage::receiverID(
        const eprosima::fastcdr::optional<int32_t>& _receiverID)
{
    m_receiverID = _receiverID;
}

/*!
 * @brief This function moves the value in member receiverID
 * @param _receiverID New value to be moved in member receiverID
 */
void EncodedITSMessage::receiverID(
        eprosima::fastcdr::optional<int32_t>&& _receiverID)
{
    m_receiverID = std::move(_receiverID);
}

/*!
 * @brief This function returns a constant reference to member receiverID
 * @return Constant reference to member receiverID
 */
const eprosima::fastcdr::optional<int32_t>& EncodedITSMessage::receiverID() const
{
    return m_receiverID;
}

/*!
 * @brief This function returns a reference to member receiverID
 * @return Reference to member receiverID
 */
eprosima::fastcdr::optional<int32_t>& EncodedITSMessage::receiverID()
{
    return m_receiverID;
}


/*!
 * @brief This function copies the value in member receiverType
 * @param _receiverType New value to be copied in member receiverType
 */
void EncodedITSMessage::receiverType(
        const eprosima::fastcdr::optional<int16_t>& _receiverType)
{
    m_receiverType = _receiverType;
}

/*!
 * @brief This function moves the value in member receiverType
 * @param _receiverType New value to be moved in member receiverType
 */
void EncodedITSMessage::receiverType(
        eprosima::fastcdr::optional<int16_t>&& _receiverType)
{
    m_receiverType = std::move(_receiverType);
}

/*!
 * @brief This function returns a constant reference to member receiverType
 * @return Constant reference to member receiverType
 */
const eprosima::fastcdr::optional<int16_t>& EncodedITSMessage::receiverType() const
{
    return m_receiverType;
}

/*!
 * @brief This function returns a reference to member receiverType
 * @return Reference to member receiverType
 */
eprosima::fastcdr::optional<int16_t>& EncodedITSMessage::receiverType()
{
    return m_receiverType;
}


/*!
 * @brief This function copies the value in member timestamp
 * @param _timestamp New value to be copied in member timestamp
 */
void EncodedITSMessage::timestamp(
        const eprosima::fastcdr::optional<double>& _timestamp)
{
    m_timestamp = _timestamp;
}

/*!
 * @brief This function moves the value in member timestamp
 * @param _timestamp New value to be moved in member timestamp
 */
void EncodedITSMessage::timestamp(
        eprosima::fastcdr::optional<double>&& _timestamp)
{
    m_timestamp = std::move(_timestamp);
}

/*!
 * @brief This function returns a constant reference to member timestamp
 * @return Constant reference to member timestamp
 */
const eprosima::fastcdr::optional<double>& EncodedITSMessage::timestamp() const
{
    return m_timestamp;
}

/*!
 * @brief This function returns a reference to member timestamp
 * @return Reference to member timestamp
 */
eprosima::fastcdr::optional<double>& EncodedITSMessage::timestamp()
{
    return m_timestamp;
}


/*!
 * @brief This function copies the value in member test
 * @param _test New value to be copied in member test
 */
void EncodedITSMessage::test(
        const eprosima::fastcdr::optional<std::string>& _test)
{
    m_test = _test;
}

/*!
 * @brief This function moves the value in member test
 * @param _test New value to be moved in member test
 */
void EncodedITSMessage::test(
        eprosima::fastcdr::optional<std::string>&& _test)
{
    m_test = std::move(_test);
}

/*!
 * @brief This function returns a constant reference to member test
 * @return Constant reference to member test
 */
const eprosima::fastcdr::optional<std::string>& EncodedITSMessage::test() const
{
    return m_test;
}

/*!
 * @brief This function returns a reference to member test
 * @return Reference to member test
 */
eprosima::fastcdr::optional<std::string>& EncodedITSMessage::test()
{
    return m_test;
}


// Include auxiliary functions like for serializing/deserializing.
#include "EncodedITSMessageCdrAux.ipp"

