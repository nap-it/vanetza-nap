// Copyright 2016 Proyectos y Sistemas de Mantenimiento SL (eProsima).
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/*!
 * @file EncodedITSMessage.h
 * This header file contains the declaration of the described types in the IDL file.
 *
 * This file was generated by the tool fastddsgen.
 */

#ifndef _FAST_DDS_GENERATED_ENCODEDITSMESSAGE_H_
#define _FAST_DDS_GENERATED_ENCODEDITSMESSAGE_H_

#include <array>
#include <bitset>
#include <cstdint>
#include <map>
#include <string>
#include <vector>

#include <fastcdr/cdr/fixed_size_string.hpp>
#include <fastcdr/xcdr/external.hpp>
#include <fastcdr/xcdr/optional.hpp>



#if defined(_WIN32)
#if defined(EPROSIMA_USER_DLL_EXPORT)
#define eProsima_user_DllExport __declspec( dllexport )
#else
#define eProsima_user_DllExport
#endif  // EPROSIMA_USER_DLL_EXPORT
#else
#define eProsima_user_DllExport
#endif  // _WIN32

#if defined(_WIN32)
#if defined(EPROSIMA_USER_DLL_EXPORT)
#if defined(ENCODEDITSMESSAGE_SOURCE)
#define ENCODEDITSMESSAGE_DllAPI __declspec( dllexport )
#else
#define ENCODEDITSMESSAGE_DllAPI __declspec( dllimport )
#endif // ENCODEDITSMESSAGE_SOURCE
#else
#define ENCODEDITSMESSAGE_DllAPI
#endif  // EPROSIMA_USER_DLL_EXPORT
#else
#define ENCODEDITSMESSAGE_DllAPI
#endif // _WIN32

namespace eprosima {
namespace fastcdr {
class Cdr;
class CdrSizeCalculator;
} // namespace fastcdr
} // namespace eprosima





/*!
 * @brief This class represents the structure EncodedITSMessage defined by the user in the IDL file.
 * @ingroup EncodedITSMessage
 */
class EncodedITSMessage
{
public:

    /*!
     * @brief Default constructor.
     */
    eProsima_user_DllExport EncodedITSMessage();

    /*!
     * @brief Default destructor.
     */
    eProsima_user_DllExport ~EncodedITSMessage();

    /*!
     * @brief Copy constructor.
     * @param x Reference to the object EncodedITSMessage that will be copied.
     */
    eProsima_user_DllExport EncodedITSMessage(
            const EncodedITSMessage& x);

    /*!
     * @brief Move constructor.
     * @param x Reference to the object EncodedITSMessage that will be copied.
     */
    eProsima_user_DllExport EncodedITSMessage(
            EncodedITSMessage&& x) noexcept;

    /*!
     * @brief Copy assignment.
     * @param x Reference to the object EncodedITSMessage that will be copied.
     */
    eProsima_user_DllExport EncodedITSMessage& operator =(
            const EncodedITSMessage& x);

    /*!
     * @brief Move assignment.
     * @param x Reference to the object EncodedITSMessage that will be copied.
     */
    eProsima_user_DllExport EncodedITSMessage& operator =(
            EncodedITSMessage&& x) noexcept;

    /*!
     * @brief Comparison operator.
     * @param x EncodedITSMessage object to compare.
     */
    eProsima_user_DllExport bool operator ==(
            const EncodedITSMessage& x) const;

    /*!
     * @brief Comparison operator.
     * @param x EncodedITSMessage object to compare.
     */
    eProsima_user_DllExport bool operator !=(
            const EncodedITSMessage& x) const;

    /*!
     * @brief This function copies the value in member topic
     * @param _topic New value to be copied in member topic
     */
    eProsima_user_DllExport void topic(
            const std::string& _topic);

    /*!
     * @brief This function moves the value in member topic
     * @param _topic New value to be moved in member topic
     */
    eProsima_user_DllExport void topic(
            std::string&& _topic);

    /*!
     * @brief This function returns a constant reference to member topic
     * @return Constant reference to member topic
     */
    eProsima_user_DllExport const std::string& topic() const;

    /*!
     * @brief This function returns a reference to member topic
     * @return Reference to member topic
     */
    eProsima_user_DllExport std::string& topic();


    /*!
     * @brief This function copies the value in member message
     * @param _message New value to be copied in member message
     */
    eProsima_user_DllExport void message(
            const std::vector<uint8_t>& _message);

    /*!
     * @brief This function moves the value in member message
     * @param _message New value to be moved in member message
     */
    eProsima_user_DllExport void message(
            std::vector<uint8_t>&& _message);

    /*!
     * @brief This function returns a constant reference to member message
     * @return Constant reference to member message
     */
    eProsima_user_DllExport const std::vector<uint8_t>& message() const;

    /*!
     * @brief This function returns a reference to member message
     * @return Reference to member message
     */
    eProsima_user_DllExport std::vector<uint8_t>& message();


    /*!
     * @brief This function copies the value in member rssi
     * @param _rssi New value to be copied in member rssi
     */
    eProsima_user_DllExport void rssi(
            const eprosima::fastcdr::optional<int16_t>& _rssi);

    /*!
     * @brief This function moves the value in member rssi
     * @param _rssi New value to be moved in member rssi
     */
    eProsima_user_DllExport void rssi(
            eprosima::fastcdr::optional<int16_t>&& _rssi);

    /*!
     * @brief This function returns a constant reference to member rssi
     * @return Constant reference to member rssi
     */
    eProsima_user_DllExport const eprosima::fastcdr::optional<int16_t>& rssi() const;

    /*!
     * @brief This function returns a reference to member rssi
     * @return Reference to member rssi
     */
    eProsima_user_DllExport eprosima::fastcdr::optional<int16_t>& rssi();


    /*!
     * @brief This function copies the value in member newInfo
     * @param _newInfo New value to be copied in member newInfo
     */
    eProsima_user_DllExport void newInfo(
            const eprosima::fastcdr::optional<bool>& _newInfo);

    /*!
     * @brief This function moves the value in member newInfo
     * @param _newInfo New value to be moved in member newInfo
     */
    eProsima_user_DllExport void newInfo(
            eprosima::fastcdr::optional<bool>&& _newInfo);

    /*!
     * @brief This function returns a constant reference to member newInfo
     * @return Constant reference to member newInfo
     */
    eProsima_user_DllExport const eprosima::fastcdr::optional<bool>& newInfo() const;

    /*!
     * @brief This function returns a reference to member newInfo
     * @return Reference to member newInfo
     */
    eProsima_user_DllExport eprosima::fastcdr::optional<bool>& newInfo();


    /*!
     * @brief This function copies the value in member packetSize
     * @param _packetSize New value to be copied in member packetSize
     */
    eProsima_user_DllExport void packetSize(
            const eprosima::fastcdr::optional<int16_t>& _packetSize);

    /*!
     * @brief This function moves the value in member packetSize
     * @param _packetSize New value to be moved in member packetSize
     */
    eProsima_user_DllExport void packetSize(
            eprosima::fastcdr::optional<int16_t>&& _packetSize);

    /*!
     * @brief This function returns a constant reference to member packetSize
     * @return Constant reference to member packetSize
     */
    eProsima_user_DllExport const eprosima::fastcdr::optional<int16_t>& packetSize() const;

    /*!
     * @brief This function returns a reference to member packetSize
     * @return Reference to member packetSize
     */
    eProsima_user_DllExport eprosima::fastcdr::optional<int16_t>& packetSize();


    /*!
     * @brief This function copies the value in member stationID
     * @param _stationID New value to be copied in member stationID
     */
    eProsima_user_DllExport void stationID(
            const eprosima::fastcdr::optional<int32_t>& _stationID);

    /*!
     * @brief This function moves the value in member stationID
     * @param _stationID New value to be moved in member stationID
     */
    eProsima_user_DllExport void stationID(
            eprosima::fastcdr::optional<int32_t>&& _stationID);

    /*!
     * @brief This function returns a constant reference to member stationID
     * @return Constant reference to member stationID
     */
    eProsima_user_DllExport const eprosima::fastcdr::optional<int32_t>& stationID() const;

    /*!
     * @brief This function returns a reference to member stationID
     * @return Reference to member stationID
     */
    eProsima_user_DllExport eprosima::fastcdr::optional<int32_t>& stationID();


    /*!
     * @brief This function copies the value in member receiverID
     * @param _receiverID New value to be copied in member receiverID
     */
    eProsima_user_DllExport void receiverID(
            const eprosima::fastcdr::optional<int32_t>& _receiverID);

    /*!
     * @brief This function moves the value in member receiverID
     * @param _receiverID New value to be moved in member receiverID
     */
    eProsima_user_DllExport void receiverID(
            eprosima::fastcdr::optional<int32_t>&& _receiverID);

    /*!
     * @brief This function returns a constant reference to member receiverID
     * @return Constant reference to member receiverID
     */
    eProsima_user_DllExport const eprosima::fastcdr::optional<int32_t>& receiverID() const;

    /*!
     * @brief This function returns a reference to member receiverID
     * @return Reference to member receiverID
     */
    eProsima_user_DllExport eprosima::fastcdr::optional<int32_t>& receiverID();


    /*!
     * @brief This function copies the value in member receiverType
     * @param _receiverType New value to be copied in member receiverType
     */
    eProsima_user_DllExport void receiverType(
            const eprosima::fastcdr::optional<int16_t>& _receiverType);

    /*!
     * @brief This function moves the value in member receiverType
     * @param _receiverType New value to be moved in member receiverType
     */
    eProsima_user_DllExport void receiverType(
            eprosima::fastcdr::optional<int16_t>&& _receiverType);

    /*!
     * @brief This function returns a constant reference to member receiverType
     * @return Constant reference to member receiverType
     */
    eProsima_user_DllExport const eprosima::fastcdr::optional<int16_t>& receiverType() const;

    /*!
     * @brief This function returns a reference to member receiverType
     * @return Reference to member receiverType
     */
    eProsima_user_DllExport eprosima::fastcdr::optional<int16_t>& receiverType();


    /*!
     * @brief This function copies the value in member timestamp
     * @param _timestamp New value to be copied in member timestamp
     */
    eProsima_user_DllExport void timestamp(
            const eprosima::fastcdr::optional<double>& _timestamp);

    /*!
     * @brief This function moves the value in member timestamp
     * @param _timestamp New value to be moved in member timestamp
     */
    eProsima_user_DllExport void timestamp(
            eprosima::fastcdr::optional<double>&& _timestamp);

    /*!
     * @brief This function returns a constant reference to member timestamp
     * @return Constant reference to member timestamp
     */
    eProsima_user_DllExport const eprosima::fastcdr::optional<double>& timestamp() const;

    /*!
     * @brief This function returns a reference to member timestamp
     * @return Reference to member timestamp
     */
    eProsima_user_DllExport eprosima::fastcdr::optional<double>& timestamp();


    /*!
     * @brief This function copies the value in member test
     * @param _test New value to be copied in member test
     */
    eProsima_user_DllExport void test(
            const eprosima::fastcdr::optional<std::string>& _test);

    /*!
     * @brief This function moves the value in member test
     * @param _test New value to be moved in member test
     */
    eProsima_user_DllExport void test(
            eprosima::fastcdr::optional<std::string>&& _test);

    /*!
     * @brief This function returns a constant reference to member test
     * @return Constant reference to member test
     */
    eProsima_user_DllExport const eprosima::fastcdr::optional<std::string>& test() const;

    /*!
     * @brief This function returns a reference to member test
     * @return Reference to member test
     */
    eProsima_user_DllExport eprosima::fastcdr::optional<std::string>& test();

private:

    std::string m_topic;
    std::vector<uint8_t> m_message;
    eprosima::fastcdr::optional<int16_t> m_rssi;
    eprosima::fastcdr::optional<bool> m_newInfo;
    eprosima::fastcdr::optional<int16_t> m_packetSize;
    eprosima::fastcdr::optional<int32_t> m_stationID;
    eprosima::fastcdr::optional<int32_t> m_receiverID;
    eprosima::fastcdr::optional<int16_t> m_receiverType;
    eprosima::fastcdr::optional<double> m_timestamp;
    eprosima::fastcdr::optional<std::string> m_test;

};

#endif // _FAST_DDS_GENERATED_ENCODEDITSMESSAGE_H_



