// Copyright 2016 Proyectos y Sistemas de Mantenimiento SL (eProsima).
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/*!
 * @file JSONMessage.cpp
 * This source file contains the implementation of the described types in the IDL file.
 *
 * This file was generated by the tool fastddsgen.
 */

#ifdef _WIN32
// Remove linker warning LNK4221 on Visual Studio
namespace {
char dummy;
}  // namespace
#endif  // _WIN32

#include "JSONMessage.h"

#include <fastcdr/Cdr.h>


#include <fastcdr/exceptions/BadParamException.h>
using namespace eprosima::fastcdr::exception;

#include <utility>




JSONMessage::JSONMessage()
{
}

JSONMessage::~JSONMessage()
{
}

JSONMessage::JSONMessage(
        const JSONMessage& x)
{
    m_uuid = x.m_uuid;
    m_datetime = x.m_datetime;
    m_topic = x.m_topic;
    m_message = x.m_message;
}

JSONMessage::JSONMessage(
        JSONMessage&& x) noexcept
{
    m_uuid = x.m_uuid;
    m_datetime = x.m_datetime;
    m_topic = std::move(x.m_topic);
    m_message = std::move(x.m_message);
}

JSONMessage& JSONMessage::operator =(
        const JSONMessage& x)
{

    m_uuid = x.m_uuid;
    m_datetime = x.m_datetime;
    m_topic = x.m_topic;
    m_message = x.m_message;
    return *this;
}

JSONMessage& JSONMessage::operator =(
        JSONMessage&& x) noexcept
{

    m_uuid = x.m_uuid;
    m_datetime = x.m_datetime;
    m_topic = std::move(x.m_topic);
    m_message = std::move(x.m_message);
    return *this;
}

bool JSONMessage::operator ==(
        const JSONMessage& x) const
{
    return (m_uuid == x.m_uuid &&
           m_datetime == x.m_datetime &&
           m_topic == x.m_topic &&
           m_message == x.m_message);
}

bool JSONMessage::operator !=(
        const JSONMessage& x) const
{
    return !(*this == x);
}

/*!
 * @brief This function sets a value in member uuid
 * @param _uuid New value for member uuid
 */
void JSONMessage::uuid(
        uint32_t _uuid)
{
    m_uuid = _uuid;
}

/*!
 * @brief This function returns the value of member uuid
 * @return Value of member uuid
 */
uint32_t JSONMessage::uuid() const
{
    return m_uuid;
}

/*!
 * @brief This function returns a reference to member uuid
 * @return Reference to member uuid
 */
uint32_t& JSONMessage::uuid()
{
    return m_uuid;
}


/*!
 * @brief This function sets a value in member datetime
 * @param _datetime New value for member datetime
 */
void JSONMessage::datetime(
        uint32_t _datetime)
{
    m_datetime = _datetime;
}

/*!
 * @brief This function returns the value of member datetime
 * @return Value of member datetime
 */
uint32_t JSONMessage::datetime() const
{
    return m_datetime;
}

/*!
 * @brief This function returns a reference to member datetime
 * @return Reference to member datetime
 */
uint32_t& JSONMessage::datetime()
{
    return m_datetime;
}


/*!
 * @brief This function copies the value in member topic
 * @param _topic New value to be copied in member topic
 */
void JSONMessage::topic(
        const std::string& _topic)
{
    m_topic = _topic;
}

/*!
 * @brief This function moves the value in member topic
 * @param _topic New value to be moved in member topic
 */
void JSONMessage::topic(
        std::string&& _topic)
{
    m_topic = std::move(_topic);
}

/*!
 * @brief This function returns a constant reference to member topic
 * @return Constant reference to member topic
 */
const std::string& JSONMessage::topic() const
{
    return m_topic;
}

/*!
 * @brief This function returns a reference to member topic
 * @return Reference to member topic
 */
std::string& JSONMessage::topic()
{
    return m_topic;
}


/*!
 * @brief This function copies the value in member message
 * @param _message New value to be copied in member message
 */
void JSONMessage::message(
        const std::string& _message)
{
    m_message = _message;
}

/*!
 * @brief This function moves the value in member message
 * @param _message New value to be moved in member message
 */
void JSONMessage::message(
        std::string&& _message)
{
    m_message = std::move(_message);
}

/*!
 * @brief This function returns a constant reference to member message
 * @return Constant reference to member message
 */
const std::string& JSONMessage::message() const
{
    return m_message;
}

/*!
 * @brief This function returns a reference to member message
 * @return Reference to member message
 */
std::string& JSONMessage::message()
{
    return m_message;
}


// Include auxiliary functions like for serializing/deserializing.
#include "JSONMessageCdrAux.ipp"

